package com.cxz.proxy;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.Arrays;

import com.cxz.inter.Calculator;
import com.cxz.utils.LogUtil;

/**
 * 帮Calculator.java生成代理对象 反射Class，生成要代理的对象，执行代理方法
 * 
 * @author 22527
 *
 */
public class CalculatorProxy {

	/**
	 * 为传入的参数创建一个动态代理对象
	 * 
	 * @return
	 */
	public static Calculator getProxy(final Calculator calculator) {

		// 方法执行器：帮我们的代理对象执行目标方法
		InvocationHandler h = new InvocationHandler() {

			/**
			 * proxy：代理对象，给JDK使用，我们任何时候都不要动这个对象 method：当前将要执行的目标对象的方法 args：方法调用时，外界传入的值
			 */
			@Override
			public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {

				Object result = null;
				try {
					LogUtil.logStart(method, args);
					result = method.invoke(calculator, args);
					LogUtil.logEnd(method, result);
				} catch (Exception e) {
					LogUtil.logException(method, e);
				} finally {
					System.out.println("【" + method.getName() + "】方法执行结束");
				}
				return result;
			}
		};
		// 类加载器
		ClassLoader loader = calculator.getClass().getClassLoader();
		// 类实现的所有接口
		Class<?>[] interfaces = calculator.getClass().getInterfaces();

		// 返回代理对象，为目标对象创建代理对象
		Calculator proxy = (Calculator) Proxy.newProxyInstance(loader, interfaces, h);
		return proxy;
	}
}
