package com.cxz.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.util.MultiValueMap;
import org.springframework.web.multipart.MultipartFile;

/**
 * 文件处理的工具类
 * 
 * @author 22527
 *
 */
@Component
public class FileUtils {

	// 上传单个文件
	public String fileUpload(String dir, HttpServletRequest request, boolean useUUID, MultipartFile file) {
		// 获取文件上传目录路径
		String dirpath = request != null ? request.getServletContext().getRealPath(dir) : dir;
		if (!file.isEmpty()) {
			try {
				file.transferTo(new File(getFilePath(file.getOriginalFilename(), useUUID, dirpath)));
				return "上传成功";
			} catch (IllegalStateException | IOException e) {
				return "上传失败，失败原因：" + e.getMessage();
			}
		}
		return "未选择上传文件，上传失败";
	}

	public String fileUpload(String dir, boolean useUUID, MultipartFile file) {
		return fileUpload(dir, null, useUUID, file);
	}

	// 多文件上传
	public Map<String, String> fileUpload(String dir, HttpServletRequest request, boolean useUUID,
			MultipartFile... files) {
		if (files == null || files.length == 0) {
			return null;
		}
		Map<String, String> msg = new HashMap<>();
		// 遍历文件，进行判断保存
		for (MultipartFile file : files) {
			String upload = fileUpload(dir, request, useUUID, file);
			if (upload != "上传成功") {
				msg.put(file.getName(), upload);
			}
		}
		return msg;
	}

	public Map<String, String> fileUpload(String dir, boolean useUUID, MultipartFile... files) {
		return fileUpload(dir, null, useUUID, files);
	}

	// 多文件、及文件组上传
	public Map<String, String> fileUpload(String dir, HttpServletRequest request, boolean useUUID,
			MultipartFile[] fileArray, MultipartFile... files) {
		Map<String, String> msg = new HashMap<>();
		if (fileArray != null && fileArray.length != 0) {
			for (int i = 0; i < fileArray.length; i++) {
				msg.put(fileArray[i].getName() + "_" + i, fileUpload(dir, request, useUUID, fileArray[i]));
			}
		}
		msg.putAll(fileUpload(dir, request, useUUID, files));
		return msg;
	}

	public Map<String, String> fileUpload(String dir, boolean useUUID, MultipartFile[] fileArray,
			MultipartFile... files) {
		return fileUpload(dir, null, useUUID, fileArray, files);
	}

	
//	public ResponseEntity<byte[]> download(String filepath){
////		String dir = filepath("")
//	}
	// 文件下载
	public ResponseEntity<byte[]> download(String dir, String fileName) {
		String path = getFilePath(fileName, dir);
		FileInputStream stream = null;
		try {
			stream = new FileInputStream(path);
			byte[] buf = new byte[stream.available()];
			stream.read(buf);
			MultiValueMap<String, String> headers = new HttpHeaders();
			headers.add("Content-Disposition", "attachment;filename=" + fileName);
			return new ResponseEntity<byte[]>(buf, headers, HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<byte[]>(HttpStatus.NOT_FOUND);
		} finally {
			try {
				stream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

//	public ResponseEntity<byte[]> download(String dir,String fileName,HttpRequest request) {
//		String dir = HttpRequest
//	}

	// 获取文件后缀名
	public String getSuffix(String path) {
		// 文件名：a.jpg
		return path.substring(path.lastIndexOf('.'));
	}

	// 获取UUID文件名
	public String getUUIDFileName(String suffix) {
		return UUID.randomUUID().toString() + suffix;
	}

	// 获得文件路径
	public String getFilePath(String realFileName, boolean useUUID, String... dirpaths) {
		String fileName = useUUID ? getUUIDFileName(getSuffix(realFileName)) : realFileName;
		String filepath = getFilePath(fileName, dirpaths);
		System.out.println(filepath + "-----------");
		return filepath;
	}

	// 获得目录路径，始终以 / 或者 \\ 结尾
	public String getDirPath(String dirpath) {
		if (dirpath.endsWith("/")) {
		} else if (dirpath.endsWith("\\")) {
			dirpath += "\\";
		} else {
			irpath += "/";
		}
		return dirpath;
	}
	
	

	// 获取文件总名称
	public String getFilePath(String fileName, String... dirpaths) {
		if (dirpaths == null || dirpaths.length == 0) {
			return fileName;
		} else {
			String path = "";
			for (String dirpath : dirpaths) {
				path += getDirPath(dirpath);
			}
			path += fileName;
			return path;
		}
	}
	
}
